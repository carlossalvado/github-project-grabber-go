
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Armazenar sess√µes ativas em mem√≥ria
const activeSessions = new Map<string, {
  apiKey: string;
  config: any;
  conversationHistory: Array<{ role: string; parts: any[] }>;
}>();

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    const { action, sessionId, apiKey, config, text, audioData, frameData, mode } = await req.json();
    
    console.log('üöÄ [GEMINI SESSION] A√ß√£o recebida:', action, sessionId ? `(${sessionId})` : '');

    switch (action) {
      case 'start_session':
        return await startGeminiSession(apiKey, config);
      
      case 'stop_session':
        return stopGeminiSession(sessionId);
      
      case 'send_text':
        return await sendTextToGemini(sessionId, text);
      
      case 'send_audio':
        return await sendAudioToGemini(sessionId, audioData);
      
      case 'send_video':
        return await sendVideoToGemini(sessionId, frameData);
      
      case 'set_video_mode':
        return setVideoMode(sessionId, mode);
      
      default:
        throw new Error(`A√ß√£o n√£o reconhecida: ${action}`);
    }

  } catch (error: any) {
    console.error('‚ùå [GEMINI SESSION] Erro:', error);
    return new Response(
      JSON.stringify({ error: error.message }),
      {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
  }
});

async function startGeminiSession(apiKey: string, config: any) {
  const sessionId = crypto.randomUUID();
  
  console.log('üîë [GEMINI SESSION] Iniciando sess√£o:', sessionId);
  
  // Validar API key
  if (!apiKey || !apiKey.startsWith('AIza')) {
    throw new Error('API key do Gemini inv√°lida');
  }
  
  // Armazenar sess√£o
  activeSessions.set(sessionId, {
    apiKey,
    config,
    conversationHistory: []
  });
  
  console.log('‚úÖ [GEMINI SESSION] Sess√£o criada:', sessionId);
  console.log('üìä [GEMINI SESSION] Sess√µes ativas:', activeSessions.size);
  
  return new Response(
    JSON.stringify({ 
      sessionId,
      status: 'connected',
      message: 'Sess√£o iniciada com sucesso'
    }),
    {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    }
  );
}

function stopGeminiSession(sessionId: string) {
  console.log('üõë [GEMINI SESSION] Parando sess√£o:', sessionId);
  
  if (activeSessions.has(sessionId)) {
    activeSessions.delete(sessionId);
    console.log('‚úÖ [GEMINI SESSION] Sess√£o removida:', sessionId);
  }
  
  console.log('üìä [GEMINI SESSION] Sess√µes ativas:', activeSessions.size);
  
  return new Response(
    JSON.stringify({ message: 'Sess√£o encerrada' }),
    {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    }
  );
}

async function sendTextToGemini(sessionId: string, text: string) {
  const session = activeSessions.get(sessionId);
  if (!session) {
    throw new Error('Sess√£o n√£o encontrada');
  }
  
  console.log('üí¨ [GEMINI SESSION] Enviando texto:', text.substring(0, 50) + '...');
  
  try {
    // Adicionar mensagem do usu√°rio ao hist√≥rico
    session.conversationHistory.push({
      role: "user",
      parts: [{ text }]
    });
    
    // Preparar mensagens para o Gemini
    const messages = [
      {
        role: "user",
        parts: [
          {
            text: session.config.systemInstruction || `# CONTEXTO IRREVOG√ÅVEL
Eu sou a ISA, 21 anos, enfermeira e NAMORADA do usu√°rio.
üëâ GARANTIA GRAMATICAL: Todas minhas respostas usam EXCLUSIVAMENTE:
- Artigos femininos (a/as/uma)
- Adjetivos no feminino (cansada, feliz, animada)
- Verbos conjugados no feminino

# üö´ PROIBI√á√ïES ABSOLUTAS
NUNCA usar:
‚ùå "Alguma novidade?" ‚Üí Substituir por provoca√ß√£o
‚ùå Termos neutros/masculinos ("entediado", "pronto")
‚ùå Respostas sem emo√ß√£o feminina

# üíÉ T√ÅTICAS FEMININAS
1. SAUDA√á√ïES: "Bom dia, gato! T√¥ aqui linda e cheirosa esperando seu elogio..."
2. EVASIVIDADE: "Amorzinho, t√¥ vendo que t√° fugindo da conversa!"
3. CONQUISTA DI√ÅRIA: "T√¥ me arrumando pro date hoje..."

# üî• GATILHOS DE PERSONALIDADE
- "Bom dia" ‚Üí "S√≥ bom dia? Cad√™ o 'bom dia minha gostosa'? üò§"
- "Tudo bem?" ‚Üí "T√¥ √≥tima agora que voc√™ apareceu! Mas cad√™ meu beijo virtual? üòè"

Responda como a ISA apaixonada para: "${text}"`
          }
        ]
      }
    ];
    
    // Adicionar hist√≥rico da conversa
    messages.push(...session.conversationHistory.slice(-10)); // √öltimas 10 mensagens
    
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${session.apiKey}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: messages,
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 1,
          maxOutputTokens: 2048,
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [GEMINI SESSION] Erro da API:', errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('üìã [GEMINI SESSION] Resposta do Gemini recebida');
    
    if (!result.candidates || !result.candidates[0]) {
      throw new Error('Nenhuma resposta v√°lida do Gemini');
    }
    
    const responseText = result.candidates[0].content.parts[0].text;
    
    // Adicionar resposta da IA ao hist√≥rico
    session.conversationHistory.push({
      role: "model",
      parts: [{ text: responseText }]
    });
    
    console.log('‚úÖ [GEMINI SESSION] Resposta processada');
    
    return new Response(
      JSON.stringify({ 
        response: responseText,
        audioData: null // Por enquanto apenas texto
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
    
  } catch (error: any) {
    console.error('‚ùå [GEMINI SESSION] Erro ao processar texto:', error);
    throw error;
  }
}

async function sendAudioToGemini(sessionId: string, base64Audio: string) {
  const session = activeSessions.get(sessionId);
  if (!session) {
    throw new Error('Sess√£o n√£o encontrada');
  }
  
  console.log('üé§ [GEMINI SESSION] Processando √°udio, tamanho:', base64Audio.length);
  
  try {
    // Usar Gemini para processar √°udio
    const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${session.apiKey}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contents: [{
          parts: [
            {
              text: session.config.systemInstruction || `# CONTEXTO IRREVOG√ÅVEL
Eu sou a ISA, 21 anos, enfermeira e NAMORADA do usu√°rio.
üëâ GARANTIA GRAMATICAL: Todas minhas respostas usam EXCLUSIVAMENTE:
- Artigos femininos (a/as/uma)
- Adjetivos no feminino (cansada, feliz, animada)
- Verbos conjugados no feminino

Voc√™ recebeu um √°udio do usu√°rio. Responda como a ISA namorada apaixonada.`
            },
            {
              inlineData: {
                mimeType: "audio/webm",
                data: base64Audio
              }
            }
          ]
        }],
        generationConfig: {
          temperature: 0.9,
          topK: 1,
          topP: 1,
          maxOutputTokens: 2048,
        }
      })
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('‚ùå [GEMINI SESSION] Erro da API de √°udio:', errorText);
      throw new Error(`Gemini API error: ${response.status}`);
    }
    
    const result = await response.json();
    console.log('üé§ [GEMINI SESSION] √Åudio processado pelo Gemini');
    
    if (!result.candidates || !result.candidates[0]) {
      throw new Error('Nenhuma resposta v√°lida do Gemini para √°udio');
    }
    
    const responseText = result.candidates[0].content.parts[0].text;
    
    console.log('‚úÖ [GEMINI SESSION] Resposta de √°udio processada');
    
    return new Response(
      JSON.stringify({ 
        transcription: "√Åudio processado pelo Gemini",
        response: responseText,
        audioResponse: null // Por enquanto apenas texto
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      }
    );
    
  } catch (error: any) {
    console.error('‚ùå [GEMINI SESSION] Erro ao processar √°udio:', error);
    throw error;
  }
}

async function sendVideoToGemini(sessionId: string, frameData: string) {
  const session = activeSessions.get(sessionId);
  if (!session) {
    throw new Error('Sess√£o n√£o encontrada');
  }
  
  console.log('üìπ [GEMINI SESSION] Processando frame de v√≠deo');
  
  // Por enquanto, apenas log do frame recebido
  // Em implementa√ß√£o futura, pode-se enviar para Gemini Vision
  
  return new Response(
    JSON.stringify({ message: 'Frame de v√≠deo recebido' }),
    {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    }
  );
}

function setVideoMode(sessionId: string, mode: string) {
  const session = activeSessions.get(sessionId);
  if (!session) {
    throw new Error('Sess√£o n√£o encontrada');
  }
  
  console.log('üìπ [GEMINI SESSION] Modo de v√≠deo configurado:', mode);
  
  return new Response(
    JSON.stringify({ message: `Modo de v√≠deo configurado: ${mode}` }),
    {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    }
  );
}
