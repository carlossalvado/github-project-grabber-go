
import React, { useState } from 'react';
import { X, Search } from 'lucide-react';

interface EmoticonSelectorProps {
  onSelect: (emoticon: string) => void;
  onClose: () => void;
}

const EmoticonSelector: React.FC<EmoticonSelectorProps> = ({ 
  onSelect, 
  onClose
}) => {
  const [activeCategory, setActiveCategory] = useState('smileys');
  const [searchTerm, setSearchTerm] = useState('');

  // Categorias organizadas como WhatsApp/Telegram
  const categories = {
    smileys: {
      icon: 'üòä',
      label: 'Rostos',
      emojis: [
        'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
        'ü´†', 'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', '‚ò∫Ô∏è',
        'üòö', 'üòô', 'ü•≤', 'üòã', 'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó',
        'ü§≠', 'ü´¢', 'ü´£', 'ü§´', 'ü§î', 'ü´°', 'ü§ê', 'ü§®', 'üòê', 'üòë',
        'üò∂', 'ü´•', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•', 'üòî', 'üò™', 'ü§§',
        'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß', 'ü•µ', 'ü•∂', 'ü•¥',
        'üòµ', 'ü§Ø', 'ü§†', 'ü•≥', 'ü•∏', 'üòé', 'ü§ì', 'üßê', 'üòï', 'ü´§',
        'üòü', 'üôÅ', '‚òπÔ∏è', 'üòÆ', 'üòØ', 'üò≤', 'üò≥', 'ü•∫', 'ü•π', 'üò¶',
        'üòß', 'üò®', 'üò∞', 'üò•', 'üò¢', 'üò≠', 'üò±', 'üòñ', 'üò£', 'üòû',
        'üòì', 'üò©', 'üò´', 'ü•±', 'üò§', 'üò°', 'ü§¨', 'üò†', 'ü§Ø', 'üòà',
        'üëø', 'üíÄ', '‚ò†Ô∏è', 'üí©', 'ü§°', 'üëπ', 'üë∫', 'üëª', 'üëΩ', 'üëæ',
        'ü§ñ', 'üéÉ', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üòø',
        'üòæ'
      ]
    },
    people: {
      icon: 'üëã',
      label: 'Pessoas',
      emojis: [
        'üëã', 'ü§ö', 'üñêÔ∏è', '‚úã', 'üññ', 'üëå', 'ü§å', 'ü§è', '‚úåÔ∏è', 'ü§û',
        'ü´∞', 'ü§ü', 'ü§ò', 'ü§ô', 'üëà', 'üëâ', 'üëÜ', 'üñï', 'üëá', '‚òùÔ∏è',
        'ü´µ', 'üëç', 'üëé', 'üëä', '‚úä', 'ü§õ', 'ü§ú', 'üëè', 'üôå', 'ü´∂',
        'üëê', 'ü§≤', 'ü§ù', 'üôè', '‚úçÔ∏è', 'üíÖ', 'ü§≥', 'üí™', 'ü¶æ', 'ü¶ø',
        'ü¶µ', 'ü¶∂', 'üëÇ', 'ü¶ª', 'üëÉ', 'üß†', 'ü´Ä', 'ü´Å', 'ü¶∑', 'ü¶¥',
        'üëÄ', 'üëÅÔ∏è', 'üëÖ', 'üëÑ', 'ü´¶', 'üë∂', 'üßí', 'üë¶', 'üëß', 'üßë',
        'üë±', 'üë®', 'üßî', 'üë©', 'üßì', 'üë¥', 'üëµ'
      ]
    },
    animals: {
      icon: 'üê∂',
      label: 'Animais',
      emojis: [
        'üê∂', 'üê±', 'üê≠', 'üêπ', 'üê∞', 'ü¶ä', 'üêª', 'üêº', 'üêª‚Äç‚ùÑÔ∏è', 'üê®',
        'üêØ', 'ü¶Å', 'üêÆ', 'üê∑', 'üêΩ', 'üê∏', 'üêµ', 'üôà', 'üôâ', 'üôä',
        'üêí', 'üêî', 'üêß', 'üê¶', 'üê§', 'üê£', 'üê•', 'ü¶Ü', 'ü¶Ö', 'ü¶â',
        'ü¶á', 'üê∫', 'üêó', 'üê¥', 'ü¶Ñ', 'üêù', 'ü™±', 'üêõ', 'ü¶ã', 'üêå',
        'üêû', 'üêú', 'ü™∞', 'ü™≤', 'ü™≥', 'ü¶ü', 'ü¶ó', 'üï∑Ô∏è', 'üï∏Ô∏è', 'ü¶Ç'
      ]
    },
    food: {
      icon: 'üçé',
      label: 'Comida',
      emojis: [
        'üçé', 'üçê', 'üçä', 'üçã', 'üçå', 'üçâ', 'üçá', 'üçì', 'ü´ê', 'üçà',
        'üçí', 'üçë', 'ü•≠', 'üçç', 'ü••', 'ü•ù', 'üçÖ', 'üçÜ', 'ü•ë', 'ü•¶',
        'ü•¨', 'ü•í', 'üå∂Ô∏è', 'ü´ë', 'üåΩ', 'ü•ï', 'ü´í', 'üßÑ', 'üßÖ', 'ü•î',
        'üç†', 'ü•ê', 'ü•ñ', 'üçû', 'ü•®', 'ü•Ø', 'üßÄ', 'ü•ö', 'üç≥', 'üßà',
        'ü•û', 'üßá', 'ü•ì', 'ü•©', 'üçó', 'üçñ', 'ü¶¥', 'üå≠', 'üçî', 'üçü'
      ]
    },
    activities: {
      icon: '‚öΩ',
      label: 'Atividades',
      emojis: [
        '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±',
        'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥',
        'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõº', 'üõ∑',
        '‚õ∏Ô∏è', 'ü•å', 'üéø', '‚õ∑Ô∏è', 'üèÇ', 'ü™Ç', 'üèãÔ∏è', 'ü§º', 'ü§∏', '‚õπÔ∏è',
        'ü§∫', 'ü§æ', 'üèåÔ∏è', 'üèá', 'üßò', 'üèÑ', 'üèä', 'ü§Ω', 'üö£', 'üßó'
      ]
    },
    travel: {
      icon: '‚úàÔ∏è',
      label: 'Viagem',
      emojis: [
        'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê',
        'üõª', 'üöö', 'üöõ', 'üöú', 'üèçÔ∏è', 'üõµ', 'üö≤', 'üõ¥', 'üõπ', 'üõº',
        'üöÅ', 'üõ∏', '‚úàÔ∏è', 'üõ©Ô∏è', 'ü™Ç', 'üí∫', 'üöÄ', 'üõ∞Ô∏è', 'üö¢', '‚õµ',
        'üö§', 'üõ•Ô∏è', 'üõ≥Ô∏è', '‚õ¥Ô∏è', 'üöÇ', 'üöÉ', 'üöÑ', 'üöÖ', 'üöÜ', 'üöá',
        'üöà', 'üöâ', 'üöä', 'üöù', 'üöû', 'üöã', 'üöå', 'üöç', 'üé°', 'üé¢'
      ]
    },
    objects: {
      icon: 'üí°',
      label: 'Objetos',
      emojis: [
        '‚åö', 'üì±', 'üì≤', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 'üñ±Ô∏è', 'üñ≤Ô∏è', 'üïπÔ∏è',
        'üíΩ', 'üíæ', 'üíø', 'üìÄ', 'üìº', 'üì∑', 'üì∏', 'üìπ', 'üé•', 'üìΩÔ∏è',
        'üéûÔ∏è', 'üìû', '‚òéÔ∏è', 'üìü', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è', 'üéõÔ∏è',
        'üß≠', '‚è∞', '‚è≤Ô∏è', '‚è±Ô∏è', '‚è≥', '‚åõ', 'üì°', 'üîã', 'ü™´', 'üîå',
        'üí°', 'üî¶', 'üïØÔ∏è', 'ü™î', 'üßØ', 'üõ¢Ô∏è', 'üí∏', 'üíµ', 'üí¥', 'üí∂'
      ]
    },
    symbols: {
      icon: '‚ù§Ô∏è',
      label: 'S√≠mbolos',
      emojis: [
        '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî',
        '‚ù£Ô∏è', 'üíï', 'üíû', 'üíì', 'üíó', 'üíñ', 'üíò', 'üíù', 'üíü', '‚òÆÔ∏è',
        '‚úùÔ∏è', '‚ò™Ô∏è', 'üïâÔ∏è', '‚ò∏Ô∏è', '‚ú°Ô∏è', 'üîØ', 'üïé', '‚òØÔ∏è', '‚ò¶Ô∏è', 'üõê',
        '‚õé', '‚ôà', '‚ôâ', '‚ôä', '‚ôã', '‚ôå', '‚ôç', '‚ôé', '‚ôè', '‚ôê',
        '‚ôë', '‚ôí', '‚ôì', 'üÜî', '‚öõÔ∏è', 'üâë', '‚ò¢Ô∏è', '‚ò£Ô∏è', 'üì¥', 'üì≥'
      ]
    }
  };

  const filteredEmojis = searchTerm 
    ? Object.values(categories).flatMap(cat => cat.emojis).filter(emoji => 
        emoji.includes(searchTerm)
      )
    : categories[activeCategory as keyof typeof categories]?.emojis || [];

  return (
    <div className="fixed bottom-0 left-0 right-0 z-50 bg-[#1a1d29] rounded-t-3xl shadow-2xl max-h-[70vh] flex flex-col">
      {/* Header */}
      <div className="flex justify-between items-center p-4 border-b border-blue-800/30 flex-shrink-0">
        <h3 className="text-lg font-semibold text-white">Emoticons</h3>
        <button 
          onClick={onClose} 
          className="text-blue-200 hover:text-white transition-colors p-2 hover:bg-blue-900/50 rounded-full"
        >
          <X size={20} />
        </button>
      </div>
      
      {/* Search bar */}
      <div className="p-4 border-b border-blue-800/30 flex-shrink-0">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-blue-300" size={16} />
          <input
            type="text"
            placeholder="Pesquisar emoticons..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full bg-[#2F3349] text-white placeholder-blue-300 rounded-full pl-10 pr-4 py-2 border border-blue-800/50 focus:border-blue-500 focus:outline-none"
          />
        </div>
      </div>
      
      {/* Categories */}
      {!searchTerm && (
        <div className="flex gap-1 p-4 border-b border-blue-800/30 overflow-x-auto flex-shrink-0">
          {Object.entries(categories).map(([key, category]) => (
            <button
              key={key}
              onClick={() => setActiveCategory(key)}
              className={`flex-shrink-0 flex flex-col items-center gap-1 p-3 rounded-lg transition-colors min-w-[60px] ${
                activeCategory === key 
                  ? 'bg-blue-600 text-white' 
                  : 'hover:bg-blue-900/50 text-blue-200'
              }`}
            >
              <span className="text-xl">{category.icon}</span>
              <span className="text-xs">{category.label}</span>
            </button>
          ))}
        </div>
      )}
      
      {/* Emoticons grid */}
      <div className="flex-1 p-4 overflow-y-auto touch-pan-y" style={{ WebkitOverflowScrolling: 'touch' }}>
        <div className="grid grid-cols-8 gap-2">
          {filteredEmojis.map((emoticon, index) => (
            <button
              key={`${emoticon}-${index}`}
              className="text-2xl hover:bg-blue-900/50 p-3 rounded-lg transition-all hover:scale-110 transform duration-150 flex items-center justify-center h-12 w-12 active:scale-95"
              onClick={() => onSelect(emoticon)}
            >
              {emoticon}
            </button>
          ))}
        </div>
        
        {filteredEmojis.length === 0 && searchTerm && (
          <div className="text-center text-blue-300 py-8">
            <span className="text-4xl mb-2 block">üîç</span>
            Nenhum emoticon encontrado
          </div>
        )}
      </div>
    </div>
  );
};

export default EmoticonSelector;
